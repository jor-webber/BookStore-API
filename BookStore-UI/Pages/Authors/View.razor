@page "/authors/view/{Id}"

@inject IAuthorRepository _repo
@inject NavigationManager _navManager

<h4>Author Details</h4>
<hr />
<br />

@if (Model == null)
{
    <LoadingMessage Message="Loading Author..." />
}
else
{
<div class="col-md-4">
    <table class="table table-responsive">
        <tr>
            <th>First Name</th>
            <td>@Model.FirstName</td>
        </tr>
        <tr>
            <th>Last Name</th>
            <td>@Model.LastName</td>
        </tr>
        <tr>
            <th>Biography</th>
            <td>@Model.Bio</td>
        </tr>
    </table>
    <br />

    @if (Model.Books == null || Model.Books.Count < 1)
    {
        <div class="alert alert-dismissible alert-secondary">
            No Books for this Author
        </div>
    }
    else
    {
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                <h4>Author's Books</h4>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var book in Model.Books)
                {
                    <li class="list-group-item">@book.Title - @book.Summary</li>
                }
            </ul>
        </div>
    }
</div>
}
<br />
<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-arrow-left"></span> Back to List
</button>

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
