@page "/authors/edit/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repo
@inject NavigationManager _navManager

<h3 class="card-title">Edit Author</h3>

@if (isFailed)
{
    <ErrorMessage Message="Something went wrong with the edit operation." />
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Author..." />
}
else
{
<EditForm Model="Model" OnValidSubmit="EditAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText @bind-Value="Model.FirstName" class="form-control" id="firstName" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText @bind-Value="Model.LastName" class="form-control" id="lastName" />
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span> Submit Change
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-arrow-left"></span> Back to List
    </button>
</EditForm>
}



@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private async Task EditAuthor()
    {
        var isSuccess = await _repo.Update(Endpoints.AuthorsEndpoint, Model, Model.Id);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
